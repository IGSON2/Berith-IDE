diff --git a/node_modules/@ethersproject/address/lib.esm/index.js b/node_modules/@ethersproject/address/lib.esm/index.js
index beb8dd7..e296a79 100644
--- a/node_modules/@ethersproject/address/lib.esm/index.js
+++ b/node_modules/@ethersproject/address/lib.esm/index.js
@@ -25,7 +25,7 @@ function getChecksumAddress(address) {
             chars[i + 1] = chars[i + 1].toUpperCase();
         }
     }
-    return "0x" + chars.join("");
+    return "Bx" + chars.join("").toLowerCase();
 }
 // Shims for environments that are missing some required constants and functions
 const MAX_SAFE_INTEGER = 0x1fffffffffffff;
@@ -67,10 +67,10 @@ export function getAddress(address) {
     if (typeof (address) !== "string") {
         logger.throwArgumentError("invalid address", "address", address);
     }
-    if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
-        // Missing the 0x prefix
-        if (address.substring(0, 2) !== "0x") {
-            address = "0x" + address;
+    if (address.match(/^(Bx)?[0-9a-fA-F]{40}$/)) {
+        // Missing the Bx prefix
+        if (address.substring(0, 2) !== "Bx") {
+            address = "Bx" + address;
         }
         result = getChecksumAddress(address);
         // It is a checksummed address with a bad checksum
@@ -88,9 +88,17 @@ export function getAddress(address) {
         while (result.length < 40) {
             result = "0" + result;
         }
-        result = getChecksumAddress("0x" + result);
-    }
-    else {
+        result = getChecksumAddress("Bx" + result);
+        // [Berith] Convert 0x Prefix
+}else if(address.match(/^(0x)?[0-9a-fA-F]{40}$/)){
+    if (address.substring(0, 4) === "0xBx") { address = address.slice(2); }
+    else if (address.substring(0,2)==="0x"){address = "Bx"+ address.slice(2)}
+    result = getChecksumAddress(address)
+
+    if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
+        logger.throwArgumentError("bad address checksum", "address", address);
+    }
+} else {
         logger.throwArgumentError("invalid address", "address", address);
     }
     return result;
diff --git a/node_modules/@ethersproject/address/src.ts/index.ts b/node_modules/@ethersproject/address/src.ts/index.ts
index 661d70e..d3f04aa 100644
--- a/node_modules/@ethersproject/address/src.ts/index.ts
+++ b/node_modules/@ethersproject/address/src.ts/index.ts
@@ -34,7 +34,7 @@ function getChecksumAddress(address: string): string {
         }
     }
 
-    return "0x" + chars.join("");
+    return "Bx" + chars.join("");
 }
 
 // Shims for environments that are missing some required constants and functions
@@ -75,16 +75,16 @@ function ibanChecksum(address: string): string {
 };
 
 export function getAddress(address: string): string {
-    let result = null;
+    let result = '';
 
     if (typeof(address) !== "string") {
         logger.throwArgumentError("invalid address", "address", address);
     }
 
-    if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
+    if (address.match(/^(Bx)?[0-9a-fA-F]{40}$/)) {
 
-        // Missing the 0x prefix
-        if (address.substring(0, 2) !== "0x") { address = "0x" + address; }
+        // Missing the Bx prefix
+        if (address.substring(0, 2) !== "Bx") { address = "Bx" + address; }
 
         result = getChecksumAddress(address);
 
@@ -103,8 +103,17 @@ export function getAddress(address: string): string {
 
         result = _base36To16(address.substring(4));
         while (result.length < 40) { result = "0" + result; }
-        result = getChecksumAddress("0x" + result);
+        result = getChecksumAddress("Bx" + result);
 
+    // [Berith] Convert 0x Prefix
+    }else if(address.match(/^(0x)?[0-9a-fA-F]{40}$/)){
+        if (address.substring(0, 4) === "0xBx") { address = address.slice(2); }
+        else if (address.substring(0,2)==="0x"){address = "Bx"+ address.slice(2)}
+        result = getChecksumAddress(address)
+
+        if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
+            logger.throwArgumentError("bad address checksum", "address", address);
+        }
     } else {
         logger.throwArgumentError("invalid address", "address", address);
     }
@@ -128,7 +137,7 @@ export function getIcapAddress(address: string): string {
 
 // http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed
 export function getContractAddress(transaction: { from: string, nonce: BigNumberish }) {
-    let from: string = null;
+    let from: string = '';
     try {
         from = getAddress(transaction.from);
     } catch (error) {
