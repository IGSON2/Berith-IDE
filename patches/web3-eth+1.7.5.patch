diff --git a/node_modules/web3-eth/lib/index.js b/node_modules/web3-eth/lib/index.js
index ed04b06..5b94020 100644
--- a/node_modules/web3-eth/lib/index.js
+++ b/node_modules/web3-eth/lib/index.js
@@ -35,19 +35,19 @@ var abi = require('web3-eth-abi');
 var getNetworkType = require('./getNetworkType.js');
 var formatter = helpers.formatters;
 var blockCall = function (args) {
-    return (typeof args[0] === 'string' && args[0].indexOf('0x') === 0) ? "eth_getBlockByHash" : "eth_getBlockByNumber";
+    return (typeof args[0] === 'string' && args[0].indexOf('Bx') === 0) ? "berith_getBlockByHash" : "berith_getBlockByNumber";
 };
 var transactionFromBlockCall = function (args) {
-    return (typeof args[0] === 'string' && args[0].indexOf('0x') === 0) ? 'eth_getTransactionByBlockHashAndIndex' : 'eth_getTransactionByBlockNumberAndIndex';
+    return (typeof args[0] === 'string' && args[0].indexOf('Bx') === 0) ? 'berith_getTransactionByBlockHashAndIndex' : 'berith_getTransactionByBlockNumberAndIndex';
 };
 var uncleCall = function (args) {
-    return (typeof args[0] === 'string' && args[0].indexOf('0x') === 0) ? 'eth_getUncleByBlockHashAndIndex' : 'eth_getUncleByBlockNumberAndIndex';
+    return (typeof args[0] === 'string' && args[0].indexOf('Bx') === 0) ? 'berith_getUncleByBlockHashAndIndex' : 'berith_getUncleByBlockNumberAndIndex';
 };
 var getBlockTransactionCountCall = function (args) {
-    return (typeof args[0] === 'string' && args[0].indexOf('0x') === 0) ? 'eth_getBlockTransactionCountByHash' : 'eth_getBlockTransactionCountByNumber';
+    return (typeof args[0] === 'string' && args[0].indexOf('Bx') === 0) ? 'berith_getBlockTransactionCountByHash' : 'berith_getBlockTransactionCountByNumber';
 };
 var uncleCountCall = function (args) {
-    return (typeof args[0] === 'string' && args[0].indexOf('0x') === 0) ? 'eth_getUncleCountByBlockHash' : 'eth_getUncleCountByBlockNumber';
+    return (typeof args[0] === 'string' && args[0].indexOf('Bx') === 0) ? 'berith_getUncleCountByBlockHash' : 'berith_getUncleCountByBlockNumber';
 };
 var Eth = function Eth() {
     var _this = this;
@@ -225,6 +225,7 @@ var Eth = function Eth() {
         set: function (val) {
             if (val) {
                 defaultAccount = utils.toChecksumAddress(formatter.inputAddressFormatter(val));
+                console.log("dfineProperty",defaultAccount)
             }
             // also set on the Contract object
             _this.Contract.defaultAccount = defaultAccount;
@@ -331,71 +332,71 @@ var Eth = function Eth() {
         }),
         new Method({
             name: 'getProtocolVersion',
-            call: 'eth_protocolVersion',
+            call: 'berith_protocolVersion',
             params: 0
         }),
         new Method({
             name: 'getCoinbase',
-            call: 'eth_coinbase',
+            call: 'berith_coinbase',
             params: 0
         }),
         new Method({
             name: 'isMining',
-            call: 'eth_mining',
+            call: 'berith_mining',
             params: 0
         }),
         new Method({
             name: 'getHashrate',
-            call: 'eth_hashrate',
+            call: 'berith_hashrate',
             params: 0,
             outputFormatter: utils.hexToNumber
         }),
         new Method({
             name: 'isSyncing',
-            call: 'eth_syncing',
+            call: 'berith_syncing',
             params: 0,
             outputFormatter: formatter.outputSyncingFormatter
         }),
         new Method({
             name: 'getGasPrice',
-            call: 'eth_gasPrice',
+            call: 'berith_gasPrice',
             params: 0,
             outputFormatter: formatter.outputBigNumberFormatter
         }),
         new Method({
             name: 'getFeeHistory',
-            call: 'eth_feeHistory',
+            call: 'berith_feeHistory',
             params: 3,
             inputFormatter: [utils.numberToHex, formatter.inputBlockNumberFormatter, null]
         }),
         new Method({
             name: 'getAccounts',
-            call: 'eth_accounts',
+            call: 'berith_accounts',
             params: 0,
             outputFormatter: utils.toChecksumAddress
         }),
         new Method({
             name: 'getBlockNumber',
-            call: 'eth_blockNumber',
+            call: 'berith_blockNumber',
             params: 0,
             outputFormatter: utils.hexToNumber
         }),
         new Method({
             name: 'getBalance',
-            call: 'eth_getBalance',
+            call: 'berith_getBalance',
             params: 2,
             inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter],
             outputFormatter: formatter.outputBigNumberFormatter
         }),
         new Method({
             name: 'getStorageAt',
-            call: 'eth_getStorageAt',
+            call: 'berith_getStorageAt',
             params: 3,
             inputFormatter: [formatter.inputAddressFormatter, utils.numberToHex, formatter.inputDefaultBlockNumberFormatter]
         }),
         new Method({
             name: 'getCode',
-            call: 'eth_getCode',
+            call: 'berith_getCode',
             params: 2,
             inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter]
         }),
@@ -429,7 +430,7 @@ var Eth = function Eth() {
         }),
         new Method({
             name: 'getTransaction',
-            call: 'eth_getTransactionByHash',
+            call: 'berith_getTransactionByHash',
             params: 1,
             inputFormatter: [null],
             outputFormatter: formatter.outputTransactionFormatter
@@ -443,41 +444,41 @@ var Eth = function Eth() {
         }),
         new Method({
             name: 'getTransactionReceipt',
-            call: 'eth_getTransactionReceipt',
+            call: 'berith_getTransactionReceipt',
             params: 1,
             inputFormatter: [null],
             outputFormatter: formatter.outputTransactionReceiptFormatter
         }),
         new Method({
             name: 'getTransactionCount',
-            call: 'eth_getTransactionCount',
+            call: 'berith_getTransactionCount',
             params: 2,
             inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter],
             outputFormatter: utils.hexToNumber
         }),
         new Method({
             name: 'sendSignedTransaction',
-            call: 'eth_sendRawTransaction',
+            call: 'berith_sendRawTransaction',
             params: 1,
             inputFormatter: [null],
             abiCoder: abi
         }),
         new Method({
             name: 'signTransaction',
-            call: 'eth_signTransaction',
+            call: 'berith_signTransaction',
             params: 1,
             inputFormatter: [formatter.inputTransactionFormatter]
         }),
         new Method({
             name: 'sendTransaction',
-            call: 'eth_sendTransaction',
+            call: 'berith_sendTransaction',
             params: 1,
             inputFormatter: [formatter.inputTransactionFormatter],
             abiCoder: abi
         }),
         new Method({
             name: 'sign',
-            call: 'eth_sign',
+            call: 'berith_sign',
             params: 2,
             inputFormatter: [formatter.inputSignFormatter, formatter.inputAddressFormatter],
             transformPayload: function (payload) {
@@ -487,63 +488,63 @@ var Eth = function Eth() {
         }),
         new Method({
             name: 'call',
-            call: 'eth_call',
+            call: 'berith_call',
             params: 2,
             inputFormatter: [formatter.inputCallFormatter, formatter.inputDefaultBlockNumberFormatter],
             abiCoder: abi
         }),
         new Method({
             name: 'estimateGas',
-            call: 'eth_estimateGas',
+            call: 'berith_estimateGas',
             params: 1,
             inputFormatter: [formatter.inputCallFormatter],
             outputFormatter: utils.hexToNumber
         }),
         new Method({
             name: 'submitWork',
-            call: 'eth_submitWork',
+            call: 'berith_submitWork',
             params: 3
         }),
         new Method({
             name: 'getWork',
-            call: 'eth_getWork',
+            call: 'berith_getWork',
             params: 0
         }),
         new Method({
             name: 'getPastLogs',
-            call: 'eth_getLogs',
+            call: 'berith_getLogs',
             params: 1,
             inputFormatter: [formatter.inputLogFormatter],
             outputFormatter: formatter.outputLogFormatter
         }),
         new Method({
             name: 'getChainId',
-            call: 'eth_chainId',
+            call: 'berith_chainId',
             params: 0,
             outputFormatter: utils.hexToNumber
         }),
         new Method({
             name: 'requestAccounts',
-            call: 'eth_requestAccounts',
+            call: 'berith_requestAccounts',
             params: 0,
             outputFormatter: utils.toChecksumAddress
         }),
         new Method({
             name: 'getProof',
-            call: 'eth_getProof',
+            call: 'berith_getProof',
             params: 3,
             inputFormatter: [formatter.inputAddressFormatter, formatter.inputStorageKeysFormatter, formatter.inputDefaultBlockNumberFormatter],
             outputFormatter: formatter.outputProofFormatter
         }),
         new Method({
             name: 'getPendingTransactions',
-            call: 'eth_pendingTransactions',
+            call: 'berith_pendingTransactions',
             params: 0,
             outputFormatter: formatter.outputTransactionFormatter
         }),
         new Method({
             name: 'createAccessList',
-            call: 'eth_createAccessList',
+            call: 'berith_createAccessList',
             params: 2,
             inputFormatter: [formatter.inputTransactionFormatter, formatter.inputDefaultBlockNumberFormatter],
         }),
